// common.spl
// platform independent common/standard library

fn strlen(any str) {
  let length 0;
  while < 0 load8 str {
    = @length +1 length;
    = @str +1 str;
  }
  length;
}

fn memset(any ptr, u64 c, u64 n) {
  let count 0;
  while < count n {
    store8 ptr c;
    = @ptr   +1 ptr;
    = @count +1 count;
  }
}

fn memset8(ptr, c, n) {
  let count 0;
  while < count n {
    store64 ptr c;
    = @ptr   + u64.size ptr;
    = @count + u64.size count;
  }
}

fn memcpy(dest, src, n) {
  let count 0;
  while < count n {
    store8 dest load8 src;
    = @dest +1 dest;
    = @src  +1 src;
    = @count +1 count;
  }
}

fn digit_count(u64 n) {
  let count 0;
  let base 10;
  let i 1;
  if < n 10 {
    = @count 1;
  }
  else {
    while < i n {
      = @i * i base;
      = @count +1 count;
    }
  }
  count;
}

fn u64_to_str(u64 n, any str, u64 max_size) {
  let count digit_count(n);
  let i 0;
  let base 10;

  = @str + str - count 1;

  while and (< i count) (< i max_size) {
    let index % n base;
    store8 str load8 + index "0123456789abcdef";
    = @n / n base;
    = @str - str 1;
    = @i + 1 i;
  }
}

include "lib/linux.spl"
