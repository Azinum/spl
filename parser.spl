// parser.spl

struct Parser (
  ast : ptr,
  status : u64
);

let p : Parser 0;

fn parser_error(message : cstr) -> none {
  if eq load64 + @p Parser.status NoError {
    let tmp tmp_it;
    tmp_push_cstr("[parse-error]: ");
    tmp_push_cstr(load64 + @token Token.filename);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + @token Token.line);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + @token Token.column);
    tmp_push_cstr(": ");
    tmp_push_cstr(message);
    putsn(STDERR_FILENO, tmp, - tmp_it tmp);
    = @tmp_it tmp;
    store64 + @p Parser.status Error;
  }
}

fn parse_statements() -> ptr {
  let stmts ast_create(AstStatementList);
  let done 0;
  while eq done 0 {
    = @done 1;
  }
  stmts;
}

fn parse -> ptr {
  lexer_next();
  let ast parse_statements();
  ast;
}

fn parser_init(filename : any, source : any) -> u64 {
  lexer_init(filename, source);
  = + @p Parser.ast ast_create(AstRoot);
  = + @p Parser.status NoError;

  // = @statement parse_statement;
  // = @statements parse_statements;
  // = @expr_list parse_expr_list;
  NoError;
}

fn parser_free -> none {

}
