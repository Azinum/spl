// noise.spl

let lc_cur_seed 0;

fn time {
  let SYS_time 201;
  syscall1(SYS_time, 0);
}

fn lc_random_init(seed) {
  = @lc_cur_seed seed;
}

fn lc_random {
  = @lc_cur_seed % + (* (lc_cur_seed) 16807) 13 2147483647;
  lc_cur_seed;
}

fn digit_count(n) {
  let count 0;
  let base 10;
  let i 1;
  while < i n {
    = @i * i base;
    = @count +1 count;
  }
  count;
}

fn u64_to_str(n, str, max_size) {
  let count digit_count(n);
  let i 0;
  let base 10;

  = @str + str - count 1;

  while and (< i count) (< i max_size) {
    let index % n base;
    store8 str load8 + index "0123456789abcdef";
    = @n / n base;
    = @str - str 1;
    = @i + 1 i;
  }
}

fn puts(fd, str) {
  while neq 0 load8 str {
    let ch load8 str;
    let _ syscall3(1, fd, @ch, 1);
    = @str +1 str;
  }
}

fn putc(fd, ch) {
  let _ syscall3(1, fd, @ch, 1);
}

fn putu(fd, n) {
  let MAX_BUFF_SIZE 512;
  memory buff MAX_BUFF_SIZE;
  u64_to_str(n, @buff, MAX_BUFF_SIZE);
  puts(fd, @buff);
}

fn open(path, flags, mode) syscall3(2, path, flags, mode);
fn close(fd) { let _ syscall1(3, fd); }

fn main {
  lc_random_init(time()); 

  let ERROR - 0 2;
  let O_WRONLY 1;
  let O_CREAT 64;
  let O_TRUNC 512;
  let mode 434; // 0662
  let path "noise.ppm";
  let fd open(path, or or O_CREAT O_TRUNC O_WRONLY, mode);
  if neq fd ERROR {
    let w 128;
    let h 128;
    let max_value 255;
    // write ppm header
    puts(fd, "P3\n");
    puts(fd, "# `");
    puts(fd, path);
    puts(fd, "`\n");
    putu(fd, w);
    puts(fd, " ");
    putu(fd, h);
    puts(fd, "\n");
    putu(fd, max_value);
    puts(fd, "\n");

    // generate and write pixels to ppm file
    let x 0;
    let y 0;
    while < y h {
      while < x w {
        let color % lc_random() max_value;
        puts(fd, "  ");
        putu(fd, color);
        puts(fd, " ");
        putu(fd, color);
        puts(fd, " ");
        putu(fd, color);
        if not % x 4 puts(fd, "\n");
        = @x + 1 x;
      }
      puts(fd, "\n");
      = @x 0;
      = @y + 1 y;
    }
    close(fd);
  }
}
