// ast.spl

enum u64 (
  AstNone,
  AstRoot,
  AstValue,
  AstExpression,
  AstExprList,
  AstStatement,
  AstStatementList,
  AstBlockStatement,
  AstBinopExpression,
  AstUopExpression,
  AstConstStatement,
  AstLetStatement,
  AstFuncDefinition,
  AstFuncCall,
  AstParamList,
  AstMemoryStatement,
  AstAssignment,
  AstWhileStatement,
  AstIfStatement,
  AstType,
  AstSizeof,
  AstEnum,

  MAX_AST_TYPE
);

let ast_type_str : cstr : MAX_AST_TYPE "";

const MAX_AST_NODE : u64 2048;
const MAX_AST_PTR : u64 2048;
const MAX_INTERNAL_NODE : u64 16; // how many nodes each node can hold

// ast node offsets
const Ast.node 0;
const Ast.count * sizeof any MAX_INTERNAL_NODE;
const Ast.type + Ast.count sizeof u64;
const Ast.token + Ast.type sizeof u64;
const Ast.size + Ast.token Token.size;

memory ast_node_memory * Ast.size MAX_AST_NODE;
let ast_node 0;

fn ast_create(type : u64) -> any {
  let node ast_node;
  = @ast_node + Ast.size ast_node;

  = + Ast.node node 0;
  = + Ast.count node 0;
  = + Ast.type node type;

  token_init(+ Ast.token node, "T_EOF", 5, T_EOF, l.filename, l.source);
  node;
}

fn ast_print_node(fd : u64, ast : any) -> none {
  let tmp tmp_it;
  let p tmp_push_cstr;

  let count # + Ast.count ast;
  let type  # + Ast.type ast;
  let token + Ast.token ast;

  p("count = "); tmp_push_u64(count);
  p("\n");
  p("type  = "); tmp_push_u64(type);
  p("\n");
  puts(fd, tmp);
  = @tmp_it tmp;
  token_print(token);
}

fn ast_push(ast : any, node : any) -> none {
  assert(neq 0 ast, "null ast node\n");
  if neq 0 node {
    assert(< load64 + Ast.count ast MAX_INTERNAL_NODE, "internal node capacity reached\n");
    let count + Ast.count ast;
    = + + Ast.node ast * #count sizeof any node;
    = count + 1 #count;
  }
}

fn _ast_count(ast : any, i : u64, count : u64, ast.count : u64) -> u64 {
  while < i ast.count {
    let node # + + Ast.node ast * i sizeof any;
    = @count + count _ast_count(node, 1, 1, # + Ast.count node);
    = @i + 1 i;
  }
  count;
}

fn ast_count(ast : u64) -> u64 _ast_count(ast, 0, 1, # + Ast.count ast);

fn ast_child_count(ast : any) -> u64 # + Ast.count ast;

fn _ast_print(ast : any, i : u64, count : u64, level : u64, fd : u64) -> none {
  if neq 0 ast {
    let it tmp_it;
    let p tmp_push_cstr;
    let iter 0;
    while < iter level {
      p("    ");
      = @iter + 1 iter;
    }
    p("<");
    p(table_fetch(ast_type_str, # + Ast.type ast));
    p(", ");
    let token + Ast.token ast;
    p(table_fetch(token_type_str, # + Token.type token));
    p(">: `");
    tmp_push_str(# + Token.buffer token, # + Token.length token);
    p("`\n");
    puts(fd, it);
    = @tmp_it it;

    while < i count {
      let node # + + Ast.node ast * i sizeof any;
      _ast_print(node, 0, # + Ast.count node, + 1 level, fd);
      = @i + 1 i;
    }
  }
}

fn ast_print(ast : any, fd : u64) -> none _ast_print(ast, 0, # + Ast.count ast, 0, fd);

fn ast_init -> none {
  = + @ast_type_str * AstNone            sizeof cstr "AstNone";
  = + @ast_type_str * AstRoot            sizeof cstr "AstRoot";
  = + @ast_type_str * AstValue           sizeof cstr "AstValue";
  = + @ast_type_str * AstExpression      sizeof cstr "AstExpression";
  = + @ast_type_str * AstExprList        sizeof cstr "AstExprList";
  = + @ast_type_str * AstStatement       sizeof cstr "AstStatement";
  = + @ast_type_str * AstStatementList   sizeof cstr "AstStatementList";
  = + @ast_type_str * AstBlockStatement  sizeof cstr "AstBlockStatement";
  = + @ast_type_str * AstBinopExpression sizeof cstr "AstBinopExpression";
  = + @ast_type_str * AstUopExpression   sizeof cstr "AstUopExpression";
  = + @ast_type_str * AstConstStatement  sizeof cstr "AstConstStatement";
  = + @ast_type_str * AstLetStatement    sizeof cstr "AstLetStatement";
  = + @ast_type_str * AstFuncDefinition  sizeof cstr "AstFuncDefinition";
  = + @ast_type_str * AstFuncCall        sizeof cstr "AstFuncCall";
  = + @ast_type_str * AstParamList       sizeof cstr "AstParamList";
  = + @ast_type_str * AstMemoryStatement sizeof cstr "AstMemoryStatement";
  = + @ast_type_str * AstAssignment      sizeof cstr "AstAssignment";
  = + @ast_type_str * AstWhileStatement  sizeof cstr "AstWhileStatement";
  = + @ast_type_str * AstIfStatement     sizeof cstr "AstIfStatement";
  = + @ast_type_str * AstType            sizeof cstr "AstType";
  = + @ast_type_str * AstSizeof          sizeof cstr "AstSizeof";
  = + @ast_type_str * AstEnum            sizeof cstr "AstEnum";

  = @ast_node @ast_node_memory;
}
