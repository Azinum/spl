// ast.spl

enum u64 (
  AstNone,
  AstRoot,
  AstValue,
  AstExpression,
  AstExprList,
  AstStatement,
  AstStatementList,
  AstBlockStatement,
  AstBinopExpression,
  AstUopExpression,
  AstConstStatement,
  AstLetStatement,
  AstFuncDefinition,
  AstFuncCall,
  AstParamList,
  AstMemoryStatement,
  AstAssignment,
  AstWhileStatement,
  AstIfStatement,
  AstType,
  AstSizeof,
  AstEnum,
  AstStruct,
  AstCastExpression,
  AstStaticAssert,
  AstArg,

  MAX_AST_TYPE,
);

let ast_type_str : cstr : MAX_AST_TYPE "";

const MAX_AST_NODE : u64 2048;
const MAX_INTERNAL_NODE : u64 16; // how many nodes can each node hold?

struct Ast (
  node  : ptr : MAX_INTERNAL_NODE,
  count : u64,
  type  : u64,
  token : Token,
  konst : u64
);

memory ast_node_memory * sizeof Ast MAX_AST_NODE;
let ast_node : ptr cast ptr 0;

fn ast_create(type : u64) -> ptr {
  let node : ptr ast_node;
  = @ast_node + sizeof Ast ast_node;

  = + node Ast.node 0;
  = + node Ast.count 0;
  = + node Ast.type type;
  = + node Ast.konst 0;

  token_init(+ Ast.token node, "T_EOF", 5, T_EOF, l.filename, l.source);
  node;
}

fn ast_print_node(ast : any, fd : u64) -> none {
  let tmp tmp_it;
  let p tmp_push_cstr;

  let count # + Ast.count ast;
  let type  # + Ast.type ast;
  let token + Ast.token ast;
  p("count = "); tmp_push_u64(count);
  p("\n");
  p("type  = "); tmp_push_u64(type);
  p("\n");
  putsn(fd, tmp, - tmp_it tmp);
  = @tmp_it tmp;
  token_print(token);
}

fn ast_push(ast : ptr, node : ptr) -> none {
  assert(neq 0 ast, "null ast node\n");
  if neq 0 node {
    assert(< load64 + Ast.count ast MAX_INTERNAL_NODE, "internal node capacity reached\n");
    let count : ptr + ast Ast.count;
    = + + ast Ast.node * #count sizeof any node;
    = count + 1 #count;
  }
}

fn ast_count(ast : any) -> u64 {
  let count 1;
  let i 0;
  while < i load64 + ast Ast.count {
    let node # + + ast Ast.node * i sizeof any;
    = @count + count ast_count(node);
    = @i + 1 i;
  }
  count;
}

fn ast_child_count(ast : any) -> u64 # + Ast.count ast;

fn ast_print(ast : any, level : u64, fd : u64) -> none {
  if neq 0 ast {
    let tmp tmp_it;
    let p tmp_push_cstr;
    {
      let i 0;
      while < i level {
        p("    ");
        = @i + 1 i;
      }
    }
    let type : u64 load64 + ast Ast.type;
    let token : ptr cast ptr + ast Ast.token;
    p("<");
    p(load64 + @ast_type_str * type sizeof cstr);
    p(", ");
    p(load64 + @token_type_str * load64 + token Token.type sizeof cstr);
    p(", ");
    tmp_push_u64(load64 + ast Ast.konst);
    p(">: `");
    tmp_push_str(load64 + token Token.buffer, load64 + token Token.length);
    p("`\n");
    putsn(fd, tmp, - tmp_it tmp);
    = @tmp_it tmp;
    {
      let i 0;
      let count load64 + ast Ast.count;
      while < i count {
        let node # + + ast Ast.node * i sizeof any;
        ast_print(node, + 1 level, fd);
        = @i + 1 i;
      }
    }
  }
}

fn ast_init -> none {
  = + @ast_type_str * AstNone            sizeof cstr "None";
  = + @ast_type_str * AstRoot            sizeof cstr "Root";
  = + @ast_type_str * AstValue           sizeof cstr "Value";
  = + @ast_type_str * AstExpression      sizeof cstr "Expression";
  = + @ast_type_str * AstExprList        sizeof cstr "ExprList";
  = + @ast_type_str * AstStatement       sizeof cstr "Statement";
  = + @ast_type_str * AstStatementList   sizeof cstr "StatementList";
  = + @ast_type_str * AstBlockStatement  sizeof cstr "BlockStatement";
  = + @ast_type_str * AstBinopExpression sizeof cstr "BinopExpression";
  = + @ast_type_str * AstUopExpression   sizeof cstr "UopExpression";
  = + @ast_type_str * AstConstStatement  sizeof cstr "ConstStatement";
  = + @ast_type_str * AstLetStatement    sizeof cstr "LetStatement";
  = + @ast_type_str * AstFuncDefinition  sizeof cstr "FuncDefinition";
  = + @ast_type_str * AstFuncCall        sizeof cstr "FuncCall";
  = + @ast_type_str * AstParamList       sizeof cstr "ParamList";
  = + @ast_type_str * AstMemoryStatement sizeof cstr "MemoryStatement";
  = + @ast_type_str * AstAssignment      sizeof cstr "Assignment";
  = + @ast_type_str * AstWhileStatement  sizeof cstr "WhileStatement";
  = + @ast_type_str * AstIfStatement     sizeof cstr "IfStatement";
  = + @ast_type_str * AstType            sizeof cstr "Type";
  = + @ast_type_str * AstSizeof          sizeof cstr "Sizeof";
  = + @ast_type_str * AstEnum            sizeof cstr "Enum";
  = + @ast_type_str * AstStruct          sizeof cstr "Struct";
  = + @ast_type_str * AstCastExpression  sizeof cstr "CastExpression";
  = + @ast_type_str * AstStaticAssert    sizeof cstr "StaticAssert";
  = + @ast_type_str * AstArg             sizeof cstr "Arg";

  = @ast_node @ast_node_memory;
}
