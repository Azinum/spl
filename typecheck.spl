// typecheck.spl

fn typecheck_function(block : ptr, fs : ptr, ast : ptr) -> u64 0;
let typecheck.typecheck typecheck_function;

fn typecheck_print_unused -> none {
  if not load64 + @options Options.disable_dce {
    let i MAX_SYSCALL_FUNCTION;
    let count load64 + @c Compile.symbol_count;
    while < i count {
      let symbol : Symbol 0;
      memcpy(@symbol, + + @c Compile.symbols * sizeof Symbol i, sizeof Symbol);
      let ref_count load64 + @symbol Symbol.ref_count;
      let sym_type load64 + @symbol Symbol.sym_type;
      if and eq ref_count 0 or eq sym_type SYM_FUNC load64 + @options Options.dce_all {
        ir_compile_warning_at(+ @symbol Symbol.token, "`?` defined but not used\n");
      }
      = @i + 1 i;
    }
  }
}

fn typecheck_error(message : cstr) -> none {
  if eq load64 + @c Compile.status NoError {
    let tmp tmp_it;
    tmp_push_cstr("[typecheck-error]: ");
    tmp_push_cstr(message);
    putsn(STDERR_FILENO, tmp, - tmp_it tmp);
    = @tmp_it tmp;
    store64 + @c Compile.status Error;
  }
}

// token : Token*
fn typecheck_error_at(token : ptr, message : cstr) -> none {
  if eq load64 + @c Compile.status NoError {
    let tmp tmp_it;
    tmp_push_cstr("[typecheck-error]: ");
    tmp_push_cstr(load64 + token Token.filename);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + token Token.line);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + token Token.column);
    tmp_push_cstr(": ");
    tmp_push_cstr(message);
    putsn(STDERR_FILENO, tmp, - tmp_it tmp);
    = @tmp_it tmp;
    store64 + @c Compile.status Error;
  }
}

fn typecheck_print_stack(fd : u64) -> none {
  let i 0;
  let count load64 + @c Compile.ts_count;
  while < i count {
    let type : u64 load64 + + @c Compile.ts * sizeof u64 i;
    let value : Value 0;
    memcpy(@value, + + @c Compile.vs * sizeof Value i, sizeof Value);
    let message tmp_it;
    tmp_push_u64(i);
    tmp_push_cstr(": `");
    tmp_push_cstr(load64 + @compile_type_str * sizeof cstr type);
    tmp_push_cstr("`, ");
    tmp_push_u64(load64 + @value Value.num);
    tmp_push_cstr("\n");
    tmp_push_byte(0);
    puts(fd, message);
    = @tmp_it message;
    = @i + 1 i;
  }
}

fn ts_push(type : u64) -> u64 {
  let result TypeNone;
  if < load64 + @c Compile.ts_count MAX_TYPE_STACK {
    = + + @c Compile.ts * sizeof result load64 + @c Compile.ts_count type;
    = + @c Compile.ts_count + 1 load64 + @c Compile.ts_count;
    = @result type;
  }
  else {
    assert(0, "type stack overflow\n");
  }
  result;
}

fn ts_pop -> u64 {
  let result TypeNone;
  if < load64 + @c Compile.ts_count MAX_TYPE_STACK {
    = + @c Compile.ts_count - load64 + @c Compile.ts_count 1;
    = @result load64 + + @c Compile.ts * sizeof u64 load64 + @c Compile.ts_count;
  }
  else {
    assert(0, "type stack underflow\n");
  }
  result;
}

fn ts_top -> u64 {
  let result TypeNone;
  if < load64 + @c Compile.ts_count MAX_TYPE_STACK {
    = @result load64 + + @c Compile.ts * sizeof u64 - load64 + @c Compile.ts_count 1;
  }
  result;
}

// value : Value*
fn vs_push(value : ptr) -> u64 {
  let result NoError;
  if < load64 + @c Compile.vs_count MAX_TYPE_STACK {
    memcpy(+ + @c Compile.vs * sizeof Value load64 + @c Compile.vs_count, value, sizeof Value);
    = + @c Compile.vs_count + 1 load64 + @c Compile.vs_count;
  }
  else {
    assert(0, "value stack overflow\n");
    = @result Error;
  }
  result;
}

fn vs_top(value_out : ptr) -> none {
  if < load64 + @c Compile.vs_count MAX_TYPE_STACK {
    if cast u64 value_out {
      memcpy(value_out, + + @c Compile.vs * sizeof Value - load64 + @c Compile.vs_count 1, sizeof Value);
    }
  }
  else {
    if cast u64 value_out {
      = @value_out NULL;
    }
  }
}

fn vs_pop(value_out : ptr) -> u64 {
  let result NoError;
  if < load64 + @c Compile.vs_count MAX_TYPE_STACK {
    if cast u64 value_out {
      vs_top(value_out);
    }
    = + @c Compile.vs_count - load64 + @c Compile.vs_count 1;
  }
  else {
    assert(0, "value stack underflow\n");
    = @result Error;
  }
  result;
}

fn check_func_signatures(a : ptr, b : ptr) -> u64 {
  let result 1;
  if and
    eq load64 + a Function.argc load64 + b Function.argc
    eq load64 + a Function.rtype load64 + b Function.rtype {

    let i 0;
    let argc load64 + a Function.argc;
    while < i argc {
      // TODO(lucas): not sure if this works, testing needs to be done. indexing like this is tough man...
      let arg_a : u64 load64 + + a Function.argc * sizeof u64 i;
      let arg_b : u64 load64 + + b Function.argc * sizeof u64 i;
      let type_a : u64 load64 + + + @c Compile.symbols * sizeof Symbol arg_a Symbol.type;
      let type_b : u64 load64 + + + @c Compile.symbols * sizeof Symbol arg_b Symbol.type;
      if neq type_a type_b {
        = @result 0;
        = @i argc; // break out of the loop
      }
      = @i + 1 i;
    }
  }
  else {
    = @result 0;
  }

  result;
}

fn is_branch_konst_eval(ast : ptr) -> u64 {
  let konst 1;
  let i 0;
  let count load64 + ast Ast.count;
  while < i count {
    let node cast ptr load64 + + ast Ast.node * sizeof ptr i;
    if eq load64 + node Ast.konst 0 {
      = @konst 0;
      = @i count;
    }
    = @i + 1 i;
  }
  konst;
}

fn is_numerical(type : u64) -> u64 {
  or or or
    eq type TypeUnsigned64
    eq type TypeUnsigned32
    eq type TypeUnsigned16
    eq type TypeUnsigned8;
}

fn token_to_compile_type(block : ptr, fs : ptr, token : ptr, symbol_out : ptr) -> u64 {
  let result TypeNone;
  let type load64 + token Token.type;
  if eq type T_ANY {
    = @type TypeAny;
  }
  else if eq type T_PTR {
    = @type TypePtr;
  }
  else if eq type T_UNSIGNED64 {
    = @type TypeUnsigned64;
  }
  else if eq type T_UNSIGNED32 {
    = @type TypeUnsigned32;
  }
  else if eq type T_UNSIGNED16 {
    = @type TypeUnsigned16;
  }
  else if eq type T_UNSIGNED8 {
    = @type TypeUnsigned8;
  }
  else if or eq type T_CSTRING eq type T_CSTR {
    = @type TypeCString;
  }
  else if eq type T_IDENTIFIER {
    let symbol NULL;
    let buffer : Buffer 0;
    buffer_init(@buffer, cast ptr load64 + token Token.buffer, load64 + token Token.length);
    if eq compile_lookup_value(block, fs, @buffer, @symbol, NULL, NULL) NoError {
      if cast u64 symbol_out {
        memcpy(symbol_out, symbol, sizeof Symbol);
      }
      = @result load64 + symbol Symbol.type;
    }
  }
  result;
}

fn typecheck_node_list(block : ptr, fs : ptr, ast : ptr) -> u64 {
  let i 0;
  let count load64 + ast Ast.count;
  while < i count {
    let _ typecheck.typecheck(block, fs, cast ptr load64 + + ast Ast.node * sizeof ptr i);
    = @i + 1 i;
  }
  NoError;
}

fn typecheck_let_statement(block : ptr, fs : ptr, ast : ptr) -> u64 {
  assert(0, "typecheck_let_statement(): not implemented yet\n");
  NoError;
}

fn typecheck(block : ptr, fs : ptr, ast : ptr) -> u64 {
  if eq load64 + @c Compile.status NoError {
    let type load64 + ast Ast.type;
    if eq type AstValue {
      let token_type load64 + + ast Ast.token Token.type;
      if eq token_type T_NUMBER {
        let value : Value 0;
        = + @value Value.num load64 + + ast Ast.token Token.v;
        = + @value Value.konst 1;
        = + ast Ast.konst 1;
        { let _ vs_push(@value); }
        { let _ ts_push(TypeUnsigned64); }
      }
      else if eq token_type T_CSTRING {
        let value : Value 0;
        memset(@value, 0, sizeof Value);
        { let _ vs_push(@value); }
        { let _ ts_push(TypeCString); }
      }
      else if eq token_type T_IDENTIFIER {
        let symbol : ptr NULL;
        let symbol_index UINT64_MAX;
        let token_buffer : Buffer 0;
        buffer_init(cast ptr @token_buffer, cast ptr load64 + + ast Ast.token Token.buffer, load64 + + ast Ast.token Token.length);
        if eq compile_lookup_value(block, fs, @token_buffer, @symbol, @symbol_index, NULL) NoError {
          = + symbol Symbol.ref_count + 1 load64 + symbol Symbol.ref_count;
          = + + ast Ast.token Token.v symbol_index;
          { let _ vs_push(+ symbol Symbol.value); }
          = + ast Ast.konst load64 + + symbol Symbol.value Value.konst;
          { let _ ts_push(load64 + symbol Symbol.type); }
        }
        else {
          let message tmp_it;
          tmp_push_cstr("symbol `");
          tmp_push_str(load64 + + ast Ast.token Token.buffer, load64 + + ast Ast.token Token.length);
          tmp_push_cstr("` not defined\n");
          tmp_push_byte(0);
          compile_error_at(+ ast Ast.token, cast cstr message);
          = @tmp_it message;
        }
      }
      else if eq token_type T_AT {
        // TODO(lucas): implement when compile_lookup_value and compile_declare_value is implemented
      }
      else {
        assert(0, "invalid token type\n");
      }
    }
    else if eq type AstExpression {
      { let _ typecheck(block, fs, cast ptr load64 + + ast Ast.node * sizeof ptr 0); }
      let konst is_branch_konst_eval(ast);
      = + ast Ast.konst konst;
    }
    else if or or eq type AstExprList eq type AstStatement eq type AstStatementList {
      let _ typecheck_node_list(block, fs, ast);
      let konst is_branch_konst_eval(ast);
      = + ast Ast.konst konst;
    }
    else if eq type AstBinopExpression {
      { let _ typecheck_node_list(block, fs, ast); }
      let a ts_pop();
      let b ts_pop();
      if and
        or or or is_numerical(a) eq a TypeAny eq a TypePtr eq a TypeCString
        or or or is_numerical(b) eq b TypeAny eq b TypePtr eq b TypeCString {
        let va : Value 0;
        let vb : Value 0;
        { let _ vs_pop(@vb); }
        { let _ vs_pop(@va); }
        = + ast Ast.konst and load64 + @va Value.konst load64 + @vb Value.konst;

        let num : u64 0;
        let token_type load64 + + ast Ast.token Token.type;
        if eq token_type T_ADD {
          = @num + load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_SUB {
          = @num - load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_MUL {
          = @num * load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_DIV {
          if and eq load64 + @vb Value.num 0 load64 + @vb Value.konst {
            typecheck_error("divide by zero arithmetic error\n");
          }
          else {
            = @num / load64 + @va Value.num load64 + @vb Value.num;
          }
        }
        else if eq token_type T_DIVMOD {
          if and eq load64 + @vb Value.num 0 load64 + @vb Value.konst {
            typecheck_error("modulo by zero arithmetic error\n");
          }
          else {
            = @num % load64 + @va Value.num load64 + @vb Value.num;
          }
        }
        else if eq token_type T_LSHIFT {
          assert(0, "T_LSHIFT: not implemented yet\n");
        }
        else if eq token_type T_RSHIFT {
          assert(0, "T_RSHIFT: not implemented yet\n");
        }
        else if eq token_type T_LT {
          = @num < load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_GT {
          = @num > load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_AND {
          = @num and load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_OR {
          = @num or load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_EQ {
          = @num eq load64 + @va Value.num load64 + @vb Value.num;
        }
        else if eq token_type T_NEQ {
          = @num neq load64 + @va Value.num load64 + @vb Value.num;
        }
        else {
          assert(0, "unhandled operator\n");
        }
        let value : Value 0;
        = + @value Value.num num;
        = + @value Value.konst load64 + ast Ast.konst;
        { let _ vs_push(@value); }
        { let _ ts_push(a); }
      }
      else {
        typecheck_error("type mismatch in binary operator expression\n");
      }
    }
    else if eq type AstUopExpression {
      let ts_count : u64 load64 + @c Compile.ts_count;
      { let _ typecheck_node_list(block, fs, ast); }
      = + ast Ast.konst is_branch_konst_eval(ast);
      let ts_delta : u64 - load64 + @c Compile.ts_count ts_count;
      if neq ts_delta 0 {
        let token_type load64 + + ast Ast.token Token.type;
        if eq token_type T_PRINT {
          { let _ vs_pop(NULL); }
          { let _ ts_pop(); }
        }
        else if or or or or
          eq token_type T_DEREF
          eq token_type T_LOAD64
          eq token_type T_LOAD32
          eq token_type T_LOAD16
          eq token_type T_LOAD8 {
          { let _ ts_pop(); }
          { let _ ts_push(TypeUnsigned64); }
        }
        else if eq token_type T_LOGICAL_NOT {
          let value : Value 0;
          { let _ vs_pop(@value); }
          = + @value Value.num not load64 + @value Value.num;
          { let _ vs_push(@value); }
        }
      }
      else {
        typecheck_error("no value was produced in the rhs of the unary expression\n");
      }
    }
    else if or eq type AstLetStatement eq type AstConstStatement {
    }
    else if eq type AstBlockStatement {
      let local_block : Block 0;
      block_init(@local_block, block);
      { let _ typecheck_node_list(@local_block, fs, ast); }
      = + ast Ast.konst is_branch_konst_eval(ast);
    }
    else if eq type AstFuncDefinition {
      // TODO(lucas): implement when compile_lookup_value and compile_declare_value is implemented
    }
    else if eq type AstFuncCall {
      // TODO(lucas): implement when compile_lookup_value and compile_declare_value is implemented
    }
    else if eq type AstWhileStatement {
      let cond cast ptr load64 + + ast Ast.node * sizeof ptr 0;
      let body cast ptr load64 + + ast Ast.node * sizeof ptr 1;
      { let _ typecheck(block, fs, cond); }
      let type ts_pop(); // pop condition result
      { let _ vs_pop(NULL); } // pop condition result
      if is_numerical(type) {
        let local_block : Block 0;
        block_init(@local_block, block);
        { let _ typecheck(@local_block, fs, body); }
        = + ast Ast.konst is_branch_konst_eval(ast);
      }
      else {
        typecheck_error("invalid type in while statement condition\n");
      }
    }
    else if eq type AstIfStatement {
      let cond cast ptr load64 + + ast Ast.node * sizeof ptr 0;
      let body cast ptr load64 + + ast Ast.node * sizeof ptr 1;
      { let _ typecheck(block, fs, cond); }
      let type ts_pop(); // pop condition result
      { let _ vs_pop(NULL); } // pop condition result
      if is_numerical(type) {
        let local_block : Block 0;
        block_init(@local_block, block);
        { let _ typecheck(@local_block, fs, body); }
        if eq load64 + ast Ast.count 3 {
          let else_body cast ptr load64 + + ast Ast.node * sizeof ptr 2;
          let local_block : Block 0;
          block_init(@local_block, block);
        { let _ typecheck(@local_block, fs, else_body); }
        }
        = + ast Ast.konst is_branch_konst_eval(ast);
      }
      else {
        typecheck_error("invalid type in if statement condition\n");
      }
    }
    else if eq type AstMemoryStatement {
      // TODO(lucas): implement when compile_lookup_value and compile_declare_value is implemented
    }
    else if eq type AstAssignment {
      let first cast ptr load64 + + ast Ast.node * sizeof ptr 0;
      let second cast ptr load64 + + ast Ast.node * sizeof ptr 1;
      { let _ typecheck(block, fs, first); }
      { let _ typecheck(block, fs, second); }
      let b ts_pop();
      let a ts_pop();
      if or eq a TypePtr eq a TypeAny {
        { let _ vs_pop(NULL); }
        { let _ vs_pop(NULL); }
      }
      else {
        typecheck_error("type mismatch in assignment statement\n");
      }
    }
    else if eq type AstSizeof {
      let t cast ptr + ast Ast.token;
      let size : u64 0;
      let token_type load64 + t Token.type;
      if or eq token_type T_UNSIGNED64 eq token_type T_NUMBER {
        = @size sizeof u64;
      }
      else if eq token_type T_UNSIGNED32 {
        = @size sizeof u32;
      }
      else if eq token_type T_UNSIGNED16 {
        = @size sizeof u16;
      }
      else if eq token_type T_UNSIGNED8 {
        = @size sizeof u8;
      }
      else if or or or
        eq token_type T_PTR
        eq token_type T_CSTRING
        eq token_type T_CSTR
        eq token_type T_ANY {
        = @size sizeof ptr;
      }
      else if eq token_type T_IDENTIFIER {
        // TODO(lucas): implement
      }
      else {
        assert(0, "type not implemented yet\n");
      }
      let value : Value 0;
      = + @value Value.num size;
      = + @value Value.konst 1;
      { let _ vs_push(@value); }
      = + t Token.v size;
      = + ast Ast.konst 1;
      { let _ ts_push(TypeUnsigned64); }
    }
    else if eq type AstEnum {
      // TODO(lucas): implement when compile_lookup_value and compile_declare_value is implemented
    }
    else if eq type AstStruct {
      // TODO(lucas): implement when compile_lookup_value and compile_declare_value is implemented
    }
    else if eq type AstType {
      if > load64 + ast Ast.count 0 {
        { let _ typecheck_node_list(block, fs, ast); }
      }
    }
    else if eq type AstCastExpression {
      // TODO(lucas): implement when compile_lookup_value and compile_declare_value is implemented
    }
    else if eq type AstStaticAssert {
      let expr cast ptr load64 + + ast Ast.node * sizeof ptr 0;
      let node cast ptr load64 + + ast Ast.node * sizeof ptr 1;
      { let _ typecheck(block, fs, expr); }
      { let _ ts_pop(); }
      let value : Value 0;
      { let _ vs_pop(@value); }
      if eq load64 + @value Value.konst 0 {
        typecheck_error("can not do static on an expression that is evaluated at runtime\n");
      }
      else {
        let node_token cast ptr + node Ast.token;
        let message cast cstr tmp_it;
        tmp_push_cstr("assertion failed: ");
        tmp_push_str(load64 + node_token Token.buffer, load64 + node_token Token.length);
        tmp_push_byte(0);
        compile_error(message);
        = @tmp_it message;
      }
    }
    else {
      assert(0, "unreachable\n");
    }
  }
  ts_top();
}

fn typecheck_program(ast : ptr) -> u64 {
  assert(cast u64 ast, "something went very wrong\n");

  = @typecheck.typecheck typecheck;

  let i 0;
  let count load64 + ast Ast.count;
  while < i count {
    let _ typecheck(+ @c Compile.global, NULL, cast ptr load64 + + ast Ast.node * sizeof ptr i);
    = @i + 1 i;
  }

  if neq load64 + @c Compile.vs_count 0 {
    typecheck_error("unhandled data on the value stack\n");
  }

  if and neq load64 + @c Compile.ts_count 0 eq load64 + @c Compile.status NoError {
    typecheck_error("unhandled data on the type stack\n");
  }

  if eq load64 + @c Compile.status NoError {
    typecheck_print_unused();
  }

  typecheck_print_stack(STDOUT_FILENO);

  print_info("type checking took ? seconds\n");
  load64 + @c Compile.status;
}
