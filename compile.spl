// compile.spl

fn symbol_init(symbol : ptr) -> none {
  assert(0, "symbol_init(): not implemented yet\n");
}

fn symbol_print(symbol : ptr) -> none {
  assert(0, "symbol_print(): not implemented yet\n");
}

fn block_init(block : ptr, parent : ptr) -> none {
  = + block Block.symbol_count 0;
  = + block Block.parent parent;
}

fn compile_error(message : cstr) -> none {
  if eq load64 + @c Compile.status NoError {
    let tmp tmp_it;
    tmp_push_cstr("[compile-error]: ");
    tmp_push_cstr(message);
    tmp_push_byte(0);
    puts(STDERR_FILENO, tmp);
    = @tmp_it tmp;
    store64 + @c Compile.status Error;
  }
}

// token : Token*
fn compile_error_at(token : ptr, message : cstr) -> none {
  if eq load64 + @c Compile.status NoError {
    let tmp tmp_it;
    tmp_push_cstr("[compile-error]: ");
    tmp_push_cstr(load64 + token Token.filename);
    tmp_push_cstr(":");
    tmp_push_cstr(load64 + token Token.line);
    tmp_push_cstr(":");
    tmp_push_cstr(load64 + token Token.column);
    tmp_push_cstr(":");
    tmp_push_cstr(message);
    tmp_push_byte(0);
    puts(STDERR_FILENO, tmp);
    = @tmp_it tmp;
    store64 + @c Compile.status Error;
  }
}

// block : Block*, fs : Function*, token : Token*, symbol : Symbol**, symbol_index : u64*
fn compile_declare_value(block : ptr, fs : ptr, token : ptr, symbol : ptr, symbol_index : ptr) -> u64 {
  assert(0, "compile_declare_value(): not implemented yet\n");
  NoError;
}

// block : Block*, fs : Function*, name : Buffer*, symbol : Symbol**, symbol_index : u64*, levels_descend : u64*
fn compile_lookup_value(block : ptr, fs : ptr, name : ptr, symbol : ptr, symbol_index : ptr, levels_descend : ptr) -> u64 {
  assert(0, "compile_lookup_value(): not implemented yet\n");
  NoError;
}

fn compile_create_syscall(name : cstr, argc : u64) -> u64 {
  NoError;
}

fn compile_print_symbol_info(fd : u64) -> none {
  assert(0, "compile_print_symbol_info(): not implemented yet\n");
}

fn compile_linux_nasm_x86_64(fd : u64) -> u64 {
  assert(0, "compile_linux_nasm_x86_64(): not implemented yet\n");
  NoError;
}

fn compile(target : u64, fd : u64) -> u64 {
  let result NoError;
  if eq target TARGET_LINUX_NASM_X86_64 {
    = @result compile_linux_nasm_x86_64(fd);
  }
  else {
    assert(0, "invalid compile target\n");
  }
  result;
}

fn compile_state_init -> u64 {
  = + @c Compile.ins_count 0;
  = + @c Compile.imm_index 0;
  = + @c Compile.symbol_count 0;
  = + @c Compile.cstring_count 0;
  block_init(+ @c Compile.global, NULL);
  = + @c Compile.label_count 0;
  = + @c Compile.status NoError;
  = + @c Compile.entry_point 0;
  = + @c Compile.ts_count 0;
  = + @c Compile.vs_count 0;
  = + @c Compile.type_count MAX_PRIMITIVE_TYPE;

  { let _ compile_create_syscall("syscall0", 0); }
  { let _ compile_create_syscall("syscall1", 1); }
  { let _ compile_create_syscall("syscall2", 2); }
  { let _ compile_create_syscall("syscall3", 3); }
  { let _ compile_create_syscall("syscall4", 4); }
  { let _ compile_create_syscall("syscall5", 5); }
  { let _ compile_create_syscall("syscall6", 6); }

  = + @ir_code_str * I_NOP                sizeof cstr "I_NOP";
  = + @ir_code_str * I_POP                sizeof cstr "I_POP";
  = + @ir_code_str * I_MOVE               sizeof cstr "I_MOVE";
  = + @ir_code_str * I_MOVE_LOCAL         sizeof cstr "I_MOVE_LOCAL";
  = + @ir_code_str * I_STORE64            sizeof cstr "I_STORE64";
  = + @ir_code_str * I_STORE32            sizeof cstr "I_STORE32";
  = + @ir_code_str * I_STORE16            sizeof cstr "I_STORE16";
  = + @ir_code_str * I_STORE8             sizeof cstr "I_STORE8";
  = + @ir_code_str * I_LOAD64             sizeof cstr "I_LOAD64";
  = + @ir_code_str * I_LOAD32             sizeof cstr "I_LOAD32";
  = + @ir_code_str * I_LOAD16             sizeof cstr "I_LOAD16";
  = + @ir_code_str * I_LOAD8              sizeof cstr "I_LOAD8";
  = + @ir_code_str * I_PUSH_ADDR_OF       sizeof cstr "I_PUSH_ADDR_OF";
  = + @ir_code_str * I_PUSH_LOCAL_ADDR_OF sizeof cstr "I_PUSH_LOCAL_ADDR_OF";
  = + @ir_code_str * I_PUSH               sizeof cstr "I_PUSH";
  = + @ir_code_str * I_PUSH_LOCAL         sizeof cstr "I_PUSH_LOCAL";
  = + @ir_code_str * I_PUSH_IMM           sizeof cstr "I_PUSH_IMM";
  = + @ir_code_str * I_ADD                sizeof cstr "I_ADD";
  = + @ir_code_str * I_SUB                sizeof cstr "I_SUB";
  = + @ir_code_str * I_MUL                sizeof cstr "I_MUL";
  = + @ir_code_str * I_LSHIFT             sizeof cstr "I_LSHIFT";
  = + @ir_code_str * I_RSHIFT             sizeof cstr "I_RSHIFT";
  = + @ir_code_str * I_DIV                sizeof cstr "I_DIV";
  = + @ir_code_str * I_DIVMOD             sizeof cstr "I_DIVMOD";
  = + @ir_code_str * I_LT                 sizeof cstr "I_LT";
  = + @ir_code_str * I_GT                 sizeof cstr "I_GT";
  = + @ir_code_str * I_AND                sizeof cstr "I_AND";
  = + @ir_code_str * I_LOGICAL_NOT        sizeof cstr "I_LOGICAL_NOT";
  = + @ir_code_str * I_OR                 sizeof cstr "I_OR";
  = + @ir_code_str * I_EQ                 sizeof cstr "I_EQ";
  = + @ir_code_str * I_NEQ                sizeof cstr "I_NEQ";
  = + @ir_code_str * I_RET                sizeof cstr "I_RET";
  = + @ir_code_str * I_NORET              sizeof cstr "I_NORET";
  = + @ir_code_str * I_PRINT              sizeof cstr "I_PRINT";
  = + @ir_code_str * I_LABEL              sizeof cstr "I_LABEL";
  = + @ir_code_str * I_CALL               sizeof cstr "I_CALL";
  = + @ir_code_str * I_ADDR_CALL          sizeof cstr "I_ADDR_CALL";
  = + @ir_code_str * I_JMP                sizeof cstr "I_JMP";
  = + @ir_code_str * I_JZ                 sizeof cstr "I_JZ";
  = + @ir_code_str * I_BEGIN_FUNC         sizeof cstr "I_BEGIN_FUNC";
  = + @ir_code_str * I_LOOP_LABEL         sizeof cstr "I_LOOP_LABEL";
  = + @ir_code_str * I_SYSCALL0           sizeof cstr "I_SYSCALL0";
  = + @ir_code_str * I_SYSCALL1           sizeof cstr "I_SYSCALL1";
  = + @ir_code_str * I_SYSCALL2           sizeof cstr "I_SYSCALL2";
  = + @ir_code_str * I_SYSCALL3           sizeof cstr "I_SYSCALL3";
  = + @ir_code_str * I_SYSCALL4           sizeof cstr "I_SYSCALL4";
  = + @ir_code_str * I_SYSCALL5           sizeof cstr "I_SYSCALL5";
  = + @ir_code_str * I_SYSCALL6           sizeof cstr "I_SYSCALL6";

  = + @compile_type_str * TypeNone           sizeof cstr "None";
  = + @compile_type_str * TypeAny            sizeof cstr "Any";
  = + @compile_type_str * TypePtr            sizeof cstr "Ptr";
  = + @compile_type_str * TypeUnsigned64     sizeof cstr "Unsigned64";
  = + @compile_type_str * TypeUnsigned32     sizeof cstr "Unsigned32";
  = + @compile_type_str * TypeUnsigned16     sizeof cstr "Unsigned16";
  = + @compile_type_str * TypeUnsigned8      sizeof cstr "Unsigned8";
  = + @compile_type_str * TypeCString        sizeof cstr "CString";
  = + @compile_type_str * TypeFunc           sizeof cstr "Func";
  = + @compile_type_str * TypeSyscallFunc    sizeof cstr "SyscallFunc";
  = + @compile_type_str * TypeStruct         sizeof cstr "Struct";
  = + @compile_type_str * MAX_PRIMITIVE_TYPE sizeof cstr "";

  = + @compile_type_size * TypeNone           sizeof u64 0;
  = + @compile_type_size * TypeAny            sizeof u64 sizeof ptr;
  = + @compile_type_size * TypePtr            sizeof u64 sizeof ptr;
  = + @compile_type_size * TypeUnsigned64     sizeof u64 sizeof u64;
  = + @compile_type_size * TypeUnsigned32     sizeof u64 sizeof u32;
  = + @compile_type_size * TypeUnsigned16     sizeof u64 sizeof u16;
  = + @compile_type_size * TypeUnsigned8      sizeof u64 sizeof u8;
  = + @compile_type_size * TypeCString        sizeof u64 sizeof ptr;
  = + @compile_type_size * TypeFunc           sizeof u64 sizeof ptr;
  = + @compile_type_size * TypeSyscallFunc    sizeof u64 sizeof ptr;
  = + @compile_type_size * TypeStruct         sizeof u64 1;
  = + @compile_type_size * MAX_PRIMITIVE_TYPE sizeof u64 0;

  NoError;
}

fn compile_state_free -> none {

}
